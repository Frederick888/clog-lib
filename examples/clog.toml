[clog]
# A repository link with the trailing '.git' which will be used to generate
# all commit and issue links
repository = "https://github.com/clog-tool/clog-lib"
# A constant release title
subtitle = "my awesome title"

# specify the style of commit links to generate, defaults to "github" if omitted
link-style = "github"

# The preferred way to set a constant changelog. This file will be read for old changelog
# data, then prepended to for new changelog data. It's the equivilant to setting
# both infile and outfile to the same file.
#
# Do not use with outfile or infile fields!
#
# Defaults to stdout when omitted
changelog = "mychangelog.md"

# This sets an output file only! If it exists already, new changelog data will be
# prepended, if not it will be created.
#
# This is useful in conjunction with the infile field if you have a separate file
# that you would like to append after newly created clog data
#
# Defaults to stdout when omitted
outfile = "MyChangelog.md"

# This sets the input file old! Any data inside this file will be appended to any
# new data that clog picks up
#
# This is useful in conjunction with the outfile field where you may wish to read
# from one file and append that data to the clog output in another
infile = "My_old_changelog.md"

# This sets the output format. There are two options "json" or "markdown" and
# defaults to "markdown" when omitted
output-format = "json"

# If you use tags, you can set the following if you wish to only pick
# up changes since your latest tag
from-latest-tag = true

# The working or project directory
git-work-tree = "/myproject"

# the git metadata directory
git-dir = "/myproject/.git"

# `clog` will display three sections in your changelog, `Features`,
# `Performance`, and `Bug Fixes` by default. You can add additional sections
# with a `[sections]` table. The `[sections]` table contains the header and
# aliases.
[sections]
MySection = ["mysec", "ms"]
# You can also use spaces in the section names
"Another Section" = ["another"]


# `clog` will use the exact component string given in your commit message (i.e.
# `feat(comp): message` will be displayed as as the "comp" component in the
# changelog output.  If you want to display a longer string for a component in
# your changelog, you can define aliases in a `[components]` table
[components]
MyLongComponentName = ["long", "comp"]
